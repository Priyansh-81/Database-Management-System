CREATE OR REPLACE TRIGGER display_driver_info_on_participation
AFTER INSERT ON PARTICIPATED
FOR EACH ROW
BEGIN
    -- Displaying the driver information when the driver participates in an accident
    DBMS_OUTPUT.PUT_LINE('Driver ID: ' || :NEW.driver_id || 
                         ', Name: ' || (SELECT name FROM PERSON WHERE driver_id = :NEW.driver_id) ||
                         ', Accident Report Number: ' || :NEW.report_number || 
                         ', Damage Amount: ' || :NEW.damage_amount);
END display_driver_info_on_participation;



-- Ensure the ACCIDENT table has a 'total_damage' column
ALTER TABLE ACCIDENT ADD (total_damage INT DEFAULT 0);

-- Create the trigger
CREATE OR REPLACE TRIGGER update_total_damage
AFTER INSERT OR DELETE ON PARTICIPATED
FOR EACH ROW
BEGIN
    -- Update total_damage after a new participation record is inserted
    IF INSERTING THEN
        UPDATE ACCIDENT
        SET total_damage = total_damage + :NEW.damage_amount
        WHERE report_number = :NEW.report_number;
    END IF;

    -- Update total_damage after a participation record is deleted
    IF DELETING THEN
        UPDATE ACCIDENT
        SET total_damage = total_damage - :OLD.damage_amount
        WHERE report_number = :OLD.report_number;
    END IF;
END update_total_damage;


SELECT p.regno, SUM(p.damage_amount) AS total_damage
FROM PARTICIPATED p
GROUP BY p.regno
HAVING SUM(p.damage_amount) > 10000;  -- Change 10000 to the desired threshold value


SELECT p.regno, COUNT(DISTINCT p.report_number) AS accident_count, SUM(p.damage_amount) AS total_damage
FROM PARTICIPATED p
GROUP BY p.regno
HAVING COUNT(DISTINCT p.report_number) > 1;

SELECT a.location, AVG(p.damage_amount) AS avg_damage
FROM ACCIDENT a
JOIN PARTICIPATED p ON a.report_number = p.report_number
GROUP BY a.location;

